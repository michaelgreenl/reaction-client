@use 'sass:map';
@use 'sass:string';

// Dark/Light Theme
@mixin theme-light {
    [data-theme='light'] & {
        @content;
    }
}

@mixin theme-dark {
    [data-theme='dark'] & {
        @content;
    }
}

// Mobile-first responsive breakpoints
$breakpoints: (
    xsm: 332px,
    sm: 682px,
    md: 848px,
    lg: 992px,
    xl: 1200px,
    xxl: 1600px,
) !default;

@mixin bp-xsm-phone {
    @media (min-width: map.get($breakpoints, 'xsm')) {
        @content;
    }
}

@mixin bp-sm-phone {
    @media (min-width: map.get($breakpoints, 'sm')) {
        @content;
    }
}

@mixin bp-md-tablet {
    @media (min-width: map.get($breakpoints, 'md')) {
        @content;
    }
}

@mixin bp-lg-laptop {
    @media (min-width: map.get($breakpoints, 'lg')) {
        @content;
    }
}

@mixin bp-xl-desktop {
    @media (min-width: map.get($breakpoints, 'xl')) {
        @content;
    }
}

@mixin bp-xxl-desktop {
    @media (min-width: map.get($breakpoints, 'xxl')) {
        @content;
    }
}

// Custom sizes
@mixin bp-custom-min($min-width) {
    @media (min-width: ($min-width + 'px')) {
        @content;
    }
}

@mixin bp-custom-max($max-width) {
    @media (max-width: ($max-width + 'px')) {
        @content;
    }
}

@mixin interactive {
    @media (hover: hover) and (pointer: fine) {
        &:hover {
            @content;
        }
    }

    &:active {
        @content;
    }
}

// Color variations
@function lighten-color($color, $percentage) {
    $amount: $percentage;
    $remaining: 100% - $amount;
    @return string.unquote('color-mix(in srgb, #{$color} #{$remaining}, white #{$amount})');
}

@function darken-color($color, $percentage) {
    $amount: $percentage;
    $remaining: 100% - $amount;
    @return string.unquote('color-mix(in srgb, #{$color} #{$remaining}, black #{$amount})');
}
